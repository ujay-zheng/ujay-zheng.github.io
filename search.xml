<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Efficient Top-k Query Processing on Massively Parallel Hardware 阅读笔记</title>
    <url>/2020/12/07/Efficient-Top-k-Query-Processing-on-Massively-Parallel-Hardware-%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[]]></content>
      <tags>
        <tag>parallel programming</tag>
        <tag>algorithm</tag>
      </tags>
  </entry>
  <entry>
    <title>HPC基础</title>
    <url>/2020/12/14/HPC%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="高性能计算"><a href="#高性能计算" class="headerlink" title="高性能计算"></a>高性能计算</h2><p>  随着硬件设备的飞速更新，高性能计算(HPC)领域也在进行不断变化。根据《CUDA C编程权威指南》一书中提到的，一般来说高性能计算涉及多个处理器或计算机的使用，以高吞吐量和高效率来完成一个复杂的任务。HPC不仅可以认为是一个计算架构还可以认为是包括硬件系统、软件系统、编程平台以及并行编程的一组元素列表。可以浅薄的认为高性能计算约等于并行计算，不过  并行计算确实是高性能计算中十分重要的一环</p>
<a id="more"></a>

<h2 id="并行计算"><a href="#并行计算" class="headerlink" title="并行计算"></a>并行计算</h2><p>  在学操作系统的时候就学到过两个词术语一个叫做并发，一个叫做并行。二者的区别在于并发是某一段时间内可以同时运行多个任务，而并行是在某一时刻可以同时运行多个任务。因此并行计算也就自然而然的可以认为是计算机在某一时刻可以同时进行许多运算。这也就要求并行计算索要解决的问题能够被划分为多个可以同时解决的小问题。并行计算通常会涉及如下两个不同的计算技术领域</p>
<h4 id="计算机架构-硬件方面-："><a href="#计算机架构-硬件方面-：" class="headerlink" title="计算机架构(硬件方面)："></a>计算机架构(硬件方面)：</h4><p>  计算机架构主要关注结构级别上(或者可以认为是硬件级别上)支持并行性。根据弗林分类发，依据指令和数据进入CPU的方式，将计算机架构可以分为如下几类</p>
<ul>
<li><p>单指令单数据(SISD)</p>
</li>
<li><p>单指令多数据(SIMD)</p>
</li>
<li><p>多指令多数据(MISD)</p>
</li>
<li><p>多指令多数据(MIMD)</p>
<p>而计算机架构还可以根据内存组织方式进行进一步划分，一般可以分为如下两种类型</p>
</li>
</ul>
<ul>
<li>分布式内存的多节点系统</li>
<li>共享内存的多处理器系统</li>
</ul>
<h4 id="并行程序的设计-软件方面-："><a href="#并行程序的设计-软件方面-：" class="headerlink" title="并行程序的设计(软件方面)："></a>并行程序的设计(软件方面)：</h4><p>  关注的是如何充分使用计算机架构所提供的能力来实现逻辑上的并行，一般来说程序并行可以分为两种并行：</p>
<ul>
<li>任务并行：多个任务可以独立地、大规模的并行执行。也就是利用多核系统对任务进行分配</li>
<li>数据并行：可以同时对许多的数据进行处理。即将利用多核系统对数据进行分配。当然对于大多数的并行程序设计都是数据并行，而CUDA编程又是非常适合解决数据并行的问题。而数据并行就涉及到对数据的划分分配。一般有两种方法将数据进行划分<ul>
<li>块划分(block partitioning):P72页</li>
<li>周期划分(cyclic partitioning)</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>parallel programming</tag>
      </tags>
  </entry>
</search>
